Why Automation testing:
-----------------------

Automated testing tools are able to playback pre-recorded and pre-defined actions.

Automation testing supports frequent regression testing.

It provides rapid feedback to developers.

It provides unlimited iterations of test case execution.

It provides disciplined documentation of test cases.

Automated test generates customized defect reports.

Less error prone as compared to manual testing.



SOME BASIC POINTS:
------------------

Before proceeding with this tutorial, let us first understand some of the key concepts associated with Automation testing of an application.	

Automation testing uses the specialized tools to automate the execution of manually designed test cases without any human intervention. Automation testing tools can access the test data, controls the execution of tests and compares the actual result against the expected result. Consequently, generating detailed test reports of the system under test.
		
Automation testing covers both functional and performance test on an application.

* Functional automation is used for automation of functional test cases. For example, regression tests, which are repetitive in nature, are automated.

**AUTOMATION TESTING TOOL USED IN FUNCTIONAL AUTOMATION:
--------------------------------------------------------

	1.Quick Test Professional, provided by HP.
	2.Rational Robot, provided by IBM.
	3.Coded UI, provided by Microsoft.
	4.Selenium, open source.
	5.Auto It, open Source.

* Performance automation is used for automation of non-functional performance test cases. For example, measuring the response time of the application under considerable (say 100 users) load.

**AUTOMATION TESTING TOOL USED IN NON-FUNCTIONAL AUTOMATION:
----------------------------------------------------------------

	1.Load Runner, provided by HP.
	2.JMeter, provided by Apache.
	3.Burp Suite, provided by PortSwigger.
	4.Acunetix, provided by Acunetix.


Automation Testing Life Cycle
-----------------------------

Test automation feasibility analysis-->test tool selection-->define scope of automation testing-->planning,design & dev--> text exe-->mantenanace



							Selenium
							---------

Selenium is a popular open-source web-based automation tool. It supports automation of websites across different browsers, platforms and programming languages.


Selenium is not just a single tool but a suite of software's, each catering to different testing needs of an organization. It has four components.

Selenium Integrated Development Environment (IDE)
Selenium Remote Control (RC)
WebDriver
Selenium Grid


1.Selenium Integrated Development Environment (IDE):
  --------------------------------------------------

Selenium IDE is implemented as Firefox extension which provides record and playback functionality on test scripts. It allows testers to export recorded scripts in many languages like HTML, Java, Ruby, RSpec, Python, C#, JUnit and TestNG. You can use these exported script in Selenium RC or Webdriver.

>Selenium IDE has limited scope and the generated test scripts are not very robust and portable.

does not require any programming logic to write its test scripts rather you can simply record your interactions with the browser to create test cases.

Birth of Selenium Remote Control (Selenium RC):
-----------------------------------------------

Selenium RC (officially deprecated by selenium)allows testers to write automated web application UI test in any of the supported programming languages. It also involves an HTTP proxy server which enables the browser to believe that the web application being tested comes from the domain provided by proxy server.

This is the first automated web testing tool that allowed users to use a programming language they prefer

NOTE: 
-----

Selenium RC had been considered quite effective for testing complex AJAX-based web user interfaces under a Continuous Integration System.

Selenium RC comes with two components:
---------------------------------------

Selenium RC Server (acts as a HTTP proxy for web requests).

Selenium RC Client (library containing your programming language code).


3.Selenium WebDriver:
----------------------

Selenium WebDriver (Selenium 2) is the successor to Selenium RC and is by far the most important component of Selenium Suite. SeleniumWebDriverprovides a programming interface to create and execute test cases. Test scripts are written in order to identify web elements on web pages and then desired actions are performed on those elements.

NOTE(IMP)::
------------

Selenium WebDriver performs much faster as compared to Selenium RC because it makes direct calls to the web browsers. RC on the other hand needs an RC server to interact with the web browser.

Since, WebDriver directly calls the methods of different browsers hence we have separate driver for each browser. Some of the most widely used web drivers include:

SELENIUM GRID::
---------------

Selenium Grid was developed by Patrick Lightbody to address the need of minimizing test execution times as much as possible. 

NOTE:
-----
In simple words, we can run our tests simultaneously on different machines running different browsers and operating systems.

Selenium Grid follows the Hub-Node Architecture to achieve parallel execution of test scripts. The Hub is considered as master of the network and the other will be the nodes. Hub controls the execution of test scripts on various nodes of the network.

 It was capable of capturing browser screenshots during significant stages, and also of sending out Selenium commands to different machines simultaneously.


Simple Commands:
----------------

 Most of the commands used in Selenium WebDriver are easy to implement. For instance, to launch a browser in WebDriver following commands are used:
WebDriver driver = new FirefoxDriver(); (Firefox browser )
WebDriver driver = new ChromeDriver(); (Chrome browser)
WebDriver driver = new InternetExplorerDriver(); (Internet Explorer browser)



Selenium WebDriver- Locating Strategies:
----------------------------------------

Note: Locating web elements in Webdriver is performed with the help of findElement() and findElements() method.

List of Locating strategies used in Wesdriver:

Locating Strategies By ID:
--------------------------
The most preferred, the easiest and efficient way to locate an element on a web page is By ID.

Locating Strategies By Name:
----------------------------

This is a fall back option when Id for element is not present. But mostly the names are used again and again, so make sure that the name is unique on the page before using it.

Locating Strategies By Tag Name:
--------------------------------

Finding an element with link text is very simple. This locator is used in case you want to locate any hyperlink only. But make sure, there is only one unique link on the web page. If there are multiple links with the same link, in such cases Selenium will perform action on the first matching element with link on page.

EG: WebElement hyperlink = driver.findElement(By.linkText("Forgot Password?"));

We have 2 links with text Forgot Email. If we try to locate 2nd link with locator
LinkText=*Forgot Email. Selenium will locate 1st link.

In this case if we want to locate the 2nd link, we will need to use exact keyword with colon (exact:). The locator in that case will be

EG: findElement(By.linkText("exact:*Forgot Email")); 



Selenium Locators: Locate element by Partial LinkText:
-------------------------------------------------------

Partial LinkText works same as LinkText, only difference is you can use a part of the text from link.

findElement(By. PartialLinkText ("Password")); 

Selenium Locators: Locate element by Tag Name:
-----------------------------------------------

 Example:
<select name="selCity" id="selCity">
<option value="none">--Select--</option>
<option value="PUNE">Pune</option>
<option value="ADI">Ahmedabad</option>
</select>
WebDriver command:
Select select = new Select(driver.findElement(By.tagName("select")));
select.selectByVisibleText("Pune");
or
select.selectByValue("PUNE"); 




Locating Strategies By Link Text
Locating Strategies By Partial Link Text
Locating Strategies By CSS
Locating Strategies By XPath



Locating Strategies- (By XPath):
--------------------------------

eg : xpath=//button[@value="Blueberry"]
   : findElement(By.xpath("//*[@id="lst-ib"]"));

Xpath=//tagname[@attribute='value']

XPath is a language used for locating nodes in XML documents.
XPath can be used as a substitute when you don't have a suitable id or name attribute for the element you want to locate.
XPath allows you to select individual elements, attributes, and some other part of XML documents for specifying location of a particular web element.

However, there are different ways of writing dynamic XPaths such as:

Using Single Slash
Using Double Slash
Using Single Attribute
Using Multiple Attribute
Using AND
Using OR
Using contains()
Using starts_with()
Using text()
Using last()

Eg:
--------------------------------------------------------------------------------

Locator by id : Id= txtUserName Locator by xpath : XPath= //input[@id=’txtUserName’]

If we execute script using both locators, to locate the field using Id will take less time compared to Xpath
---------------------------------------------------------------------------
https://blog.thedigitalgroup.com/locator-strategies-in-selenium-webdriver:
---------------------------------------------------------------------------



